---
title: "Homework #7: Stacking and Boosting" 
author: "**Benton Pelczynski**"
format: ds6030hw-html
---

```{r config, include=FALSE}
# Set global configurations and settings here
knitr::opts_chunk$set()                 # set global chunk options
ggplot2::theme_set(ggplot2::theme_bw()) # set ggplot2 theme
```

```{r packages, message=FALSE, warning=FALSE}
dir_data= 'https://mdporter.github.io/teaching/data/' # data directory
library(glmnet)
library(tidymodels)
library(tidyverse) # functions for data manipulation  
```

# Stacking for Kaggle

You are to make at least one official entry in the [House Prices: Advanced Regression Techniques](https://www.kaggle.com/c/house-prices-advanced-regression-techniques/overview) Kaggle contest **using stacking or model averaging**; at least one component model must be a boosting model.

-   You will need to register in Kaggle (its free)
-   Read the details of the contest. Understand the data and evaluation function.
-   Make at least one submission that uses **stacking or model averaging**.
-   If you get a score on the public leaderboard of $\text{RMSE}<0.50$ (note RMSE is calculated on the log scale), you receive full credit, otherwise, you'll lose 10 points.
    -   I'll allow [teaming](https://www.kaggle.com/c/house-prices-advanced-regression-techniques/team). Each team member can produce one component model and then use stacking or model averaging to combine predictions.
    -   You don't need to team, but must still combine multiple models. At least one of the component models should be boosting.
-   Each person submit the following in Canvas:
    -   Code (if teaming, your code and the shared stacking code)
    -   kaggle name (or team name) so we can ensure you had a valid submission.
    -   your score and current ranking on the kaggle leaderboard
-   Top 5 scores get 2 bonus points
    -   Teams will split their bonus points among team members

Note: Check out the [Kaggle notebooks](https://www.kaggle.com/docs/notebooks) which let you make submissions directly from the notebook. Its very similar to using Rivanna's OnDemand in that you can make a RMarkdown/Jupyter notebook or R/Python scrips that run on the cloud. Free CPU (4 cores, 30GB RAM) - amazing! Let your laptops cool off after all their hard work this semester.

**Team name: Ben Pelczynski**

**Score: 0.13411**

**Leaderboard Position: 1249**

```{r}
home_train <- read.csv("train.csv")
home_test <- read.csv("test.csv")
```

```{r}
X = makeX(home_train %>% select(-SalePrice), home_test, na.impute = TRUE)

home_train <- data.frame(X$x) %>% mutate(SalePrice = home_train$SalePrice)
home_test <- data.frame(X$xtest)
```

```{r}
n = 365
p = n / nrow(home_train)
home_split = initial_split(home_train, prop = 1 - p)
```

```{r}
library(ranger)

set.seed(1500)
rf_model = ranger(SalePrice ~ ., data = training(home_split))
rf_pred = predict(rf_model, testing(home_split))$predictions
```

```{r}
set.seed(1500)
glm_model1 = cv.glmnet(as.matrix(training(home_split)[,!names(training(home_split)) %in% c("SalePrice")]), training(home_split)$SalePrice, alpha=0)
glm_pred1 = predict(glm_model1, as.matrix(testing(home_split)[,!names(testing(home_split)) %in% c("SalePrice")]), s = "lambda.min")
```

```{r}
set.seed(1500)
glm_model2 = cv.glmnet(as.matrix(training(home_split)[,!names(training(home_split)) %in% c("SalePrice")]), training(home_split)$SalePrice, alpha=1)
glm_pred2 = predict(glm_model2, as.matrix(testing(home_split)[,!names(testing(home_split)) %in% c("SalePrice")]), s = "lambda.min")
```

```{r}
stack_data = testing(home_split) %>% mutate(rf_pred, glm_pred1 = data.frame(glm_pred1)$lambda.min, glm_pred2 = data.frame(glm_pred2)$lambda.min)
stack_model = lm(SalePrice ~ rf_pred + glm_pred1 + glm_pred2, data = stack_data)
summary(stack_model)
```

```{r}
rf_pred = predict(rf_model, home_test)$predictions
glm_pred1 = predict(glm_model1, as.matrix(home_test), s = "lambda.min")
glm_pred2 = predict(glm_model2, as.matrix(home_test), s = "lambda.min")

stack_data_final = data.frame(rf_pred, glm_pred1 = data.frame(glm_pred1)$lambda.min, glm_pred2 = data.frame(glm_pred2)$lambda.min)
final_pred = data.frame(home_test$Id, predict(stack_model, stack_data_final))
```

```{r}
final_pred <- final_pred %>% rename(Id = 'home_test.Id', SalePrice = 'predict.stack_model..stack_data_final.')
write.csv(final_pred, "pelczynski_benton_final.csv", row.names = FALSE)
```

```{r}

```
